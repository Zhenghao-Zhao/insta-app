// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: comment.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (content, user_id, post_id)
    VALUES ($1, $2, (
            SELECT
                id
            FROM
                posts p
            WHERE
                p.uid = $3))
RETURNING
    id, uid, created_at, content, user_id, post_id
`

type CreateCommentParams struct {
	Content string    `json:"content"`
	UserID  int32     `json:"user_id"`
	PostUid uuid.UUID `json:"post_uid"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (*Comment, error) {
	row := q.db.QueryRow(ctx, createComment, arg.Content, arg.UserID, arg.PostUid)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.CreatedAt,
		&i.Content,
		&i.UserID,
		&i.PostID,
	)
	return &i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE uid = $1
`

func (q *Queries) DeleteComment(ctx context.Context, commentUid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteComment, commentUid)
	return err
}

const getPaginatedCommentsByPostUID = `-- name: GetPaginatedCommentsByPostUID :many
SELECT
    c.created_at AS created_at,
    c.uid AS comment_uid,
    c.content AS content,
    COALESCE(t.like_count, 0) AS likes_count,
    (l.id IS NOT NULL)::bool AS has_liked,
    u.username AS owner_username,
    u.uid AS owner_uid,
    pr.name AS owner_name,
    pr.profile_image AS owner_profile_image
FROM
    comments c
    LEFT JOIN posts po ON po.id = c.post_id
    LEFT JOIN (
        SELECT
            comment_id,
            COUNT(*) AS like_count
        FROM
            comment_likes
        GROUP BY
            comment_id) t ON c.id = t.comment_id
    LEFT JOIN comment_likes l ON l.comment_id = c.id
        AND l.user_id = $1
    LEFT JOIN users u ON c.user_id = u.id
    LEFT JOIN profiles pr ON u.id = pr.user_id
WHERE
    po.uid = $2
ORDER BY
    c.created_at DESC OFFSET $3
LIMIT $4
`

type GetPaginatedCommentsByPostUIDParams struct {
	MyUserID int32     `json:"my_user_id"`
	PostUid  uuid.UUID `json:"post_uid"`
	Offset   int32     `json:"offset"`
	Limit    int32     `json:"limit"`
}

type GetPaginatedCommentsByPostUIDRow struct {
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	CommentUid        uuid.UUID          `json:"comment_uid"`
	Content           string             `json:"content"`
	LikesCount        int64              `json:"likes_count"`
	HasLiked          bool               `json:"has_liked"`
	OwnerUsername     *string            `json:"owner_username"`
	OwnerUid          uuid.UUID          `json:"owner_uid"`
	OwnerName         *string            `json:"owner_name"`
	OwnerProfileImage uuid.UUID          `json:"owner_profile_image"`
}

func (q *Queries) GetPaginatedCommentsByPostUID(ctx context.Context, arg GetPaginatedCommentsByPostUIDParams) ([]*GetPaginatedCommentsByPostUIDRow, error) {
	rows, err := q.db.Query(ctx, getPaginatedCommentsByPostUID,
		arg.MyUserID,
		arg.PostUid,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetPaginatedCommentsByPostUIDRow
	for rows.Next() {
		var i GetPaginatedCommentsByPostUIDRow
		if err := rows.Scan(
			&i.CreatedAt,
			&i.CommentUid,
			&i.Content,
			&i.LikesCount,
			&i.HasLiked,
			&i.OwnerUsername,
			&i.OwnerUid,
			&i.OwnerName,
			&i.OwnerProfileImage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
