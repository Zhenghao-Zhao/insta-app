// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: follower.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createFollower = `-- name: CreateFollower :one
INSERT INTO followers (follower_id, followee_id)
    VALUES ((
            SELECT
                id
            FROM
                users u
            WHERE
                u.uid = $1), (
                SELECT
                    id
                FROM
                    users u
                WHERE
                    u.uid = $2))
    RETURNING
        id, created_at, follower_id, followee_id
`

type CreateFollowerParams struct {
	FollowerUid uuid.UUID `json:"follower_uid"`
	FolloweeUid uuid.UUID `json:"followee_uid"`
}

func (q *Queries) CreateFollower(ctx context.Context, arg CreateFollowerParams) (*Follower, error) {
	row := q.db.QueryRow(ctx, createFollower, arg.FollowerUid, arg.FolloweeUid)
	var i Follower
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.FollowerID,
		&i.FolloweeID,
	)
	return &i, err
}

const dropFollow = `-- name: DropFollow :exec
DELETE FROM followers
WHERE follower_id = (
        SELECT
            id
        FROM
            users u
        WHERE
            u.uid = $1)
    AND followee_id = (
        SELECT
            id
        FROM
            users u
        WHERE
            u.uid = $2)
`

type DropFollowParams struct {
	FollowerUid uuid.UUID `json:"follower_uid"`
	FolloweeUid uuid.UUID `json:"followee_uid"`
}

func (q *Queries) DropFollow(ctx context.Context, arg DropFollowParams) error {
	_, err := q.db.Exec(ctx, dropFollow, arg.FollowerUid, arg.FolloweeUid)
	return err
}

const getPaginatedFolloweesByUserUID = `-- name: GetPaginatedFolloweesByUserUID :many
SELECT
    followee_id
FROM
    followers
WHERE
    follower_id IN (
        SELECT
            id
        FROM
            users u
        WHERE
            u.uid = $1) OFFSET $2
LIMIT $3
`

type GetPaginatedFolloweesByUserUIDParams struct {
	UserUid uuid.UUID `json:"user_uid"`
	Offset  int32     `json:"offset"`
	Limit   int32     `json:"limit"`
}

func (q *Queries) GetPaginatedFolloweesByUserUID(ctx context.Context, arg GetPaginatedFolloweesByUserUIDParams) ([]int32, error) {
	rows, err := q.db.Query(ctx, getPaginatedFolloweesByUserUID, arg.UserUid, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var followee_id int32
		if err := rows.Scan(&followee_id); err != nil {
			return nil, err
		}
		items = append(items, followee_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaginatedFollowersByUserUID = `-- name: GetPaginatedFollowersByUserUID :many
SELECT
    follower_id
FROM
    followers
WHERE
    followee_id IN (
        SELECT
            id
        FROM
            users u
        WHERE
            u.uid = $1) OFFSET $2
LIMIT $3
`

type GetPaginatedFollowersByUserUIDParams struct {
	UserUid uuid.UUID `json:"user_uid"`
	Offset  int32     `json:"offset"`
	Limit   int32     `json:"limit"`
}

func (q *Queries) GetPaginatedFollowersByUserUID(ctx context.Context, arg GetPaginatedFollowersByUserUIDParams) ([]int32, error) {
	rows, err := q.db.Query(ctx, getPaginatedFollowersByUserUID, arg.UserUid, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var follower_id int32
		if err := rows.Scan(&follower_id); err != nil {
			return nil, err
		}
		items = append(items, follower_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchPaginatedFollowees = `-- name: SearchPaginatedFollowees :many
SELECT
    u.user_uid,
    u.username,
    u.name,
    u.profile_image
FROM
    user_profile_search u
    RIGHT JOIN followers f ON u.user_id = f.followee_id
        AND f.follower_id = $1
WHERE
    search_param @@ to_tsquery($2 || ':*') OFFSET $3
LIMIT $4
`

type SearchPaginatedFolloweesParams struct {
	FollowerID  int32   `json:"follower_id"`
	SearchQuery *string `json:"search_query"`
	Offset      int32   `json:"offset"`
	Limit       int32   `json:"limit"`
}

type SearchPaginatedFolloweesRow struct {
	UserUid      uuid.UUID `json:"user_uid"`
	Username     *string   `json:"username"`
	Name         *string   `json:"name"`
	ProfileImage uuid.UUID `json:"profile_image"`
}

func (q *Queries) SearchPaginatedFollowees(ctx context.Context, arg SearchPaginatedFolloweesParams) ([]*SearchPaginatedFolloweesRow, error) {
	rows, err := q.db.Query(ctx, searchPaginatedFollowees,
		arg.FollowerID,
		arg.SearchQuery,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SearchPaginatedFolloweesRow
	for rows.Next() {
		var i SearchPaginatedFolloweesRow
		if err := rows.Scan(
			&i.UserUid,
			&i.Username,
			&i.Name,
			&i.ProfileImage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchPaginatedFollowers = `-- name: SearchPaginatedFollowers :many
SELECT
    u.user_uid,
    u.username,
    u.name,
    u.profile_image
FROM
    user_profile_search u
    RIGHT JOIN followers f ON u.user_id = f.follower_id
        AND f.followee_id = $1
WHERE
    search_param @@ to_tsquery($2 || ':*') OFFSET $3
LIMIT $4
`

type SearchPaginatedFollowersParams struct {
	FolloweeID  int32   `json:"followee_id"`
	SearchQuery *string `json:"search_query"`
	Offset      int32   `json:"offset"`
	Limit       int32   `json:"limit"`
}

type SearchPaginatedFollowersRow struct {
	UserUid      uuid.UUID `json:"user_uid"`
	Username     *string   `json:"username"`
	Name         *string   `json:"name"`
	ProfileImage uuid.UUID `json:"profile_image"`
}

func (q *Queries) SearchPaginatedFollowers(ctx context.Context, arg SearchPaginatedFollowersParams) ([]*SearchPaginatedFollowersRow, error) {
	rows, err := q.db.Query(ctx, searchPaginatedFollowers,
		arg.FolloweeID,
		arg.SearchQuery,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SearchPaginatedFollowersRow
	for rows.Next() {
		var i SearchPaginatedFollowersRow
		if err := rows.Scan(
			&i.UserUid,
			&i.Username,
			&i.Name,
			&i.ProfileImage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
