// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: profile.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (name, user_id)
    VALUES ($1, $2)
RETURNING
    id, created_at, name, user_id, profile_image
`

type CreateProfileParams struct {
	Name   string `json:"name"`
	UserID int32  `json:"user_id"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (*Profile, error) {
	row := q.db.QueryRow(ctx, createProfile, arg.Name, arg.UserID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.UserID,
		&i.ProfileImage,
	)
	return &i, err
}

const getProfileByUsernameOrID = `-- name: GetProfileByUsernameOrID :one
SELECT
    u.uid AS user_uid,
    u.username AS username,
    p.name AS name,
    p.profile_image AS profile_image,
    COALESCE(t1.follower_count, 0) AS follower_count,
    COALESCE(t2.followee_count, 0) AS followee_count,
    COALESCE(t3.post_count, 0) AS post_count,
    (f.id IS NOT NULL)::bool AS is_following
FROM
    profiles p
    LEFT JOIN (
        SELECT
            followee_id,
            count(*) AS follower_count
        FROM
            followers
        GROUP BY
            followee_id) t1 ON p.id = t1.followee_id
    LEFT JOIN (
        SELECT
            follower_id,
            count(*) AS followee_count
        FROM
            followers
        GROUP BY
            follower_id) t2 ON p.id = t2.follower_id
    LEFT JOIN (
        SELECT
            user_id,
            count(*) AS post_count
        FROM
            posts
        GROUP BY
            user_id) t3 ON p.user_id = t3.user_id
    LEFT JOIN followers f ON f.followee_id = p.user_id
        AND f.follower_id = $1
    LEFT JOIN users u ON p.user_id = u.id
WHERE
    u.id = $2
    OR u.username = $3
`

type GetProfileByUsernameOrIDParams struct {
	MyUserID       int32  `json:"my_user_id"`
	TargetUserID   int32  `json:"target_user_id"`
	TargetUsername string `json:"target_username"`
}

type GetProfileByUsernameOrIDRow struct {
	UserUid       uuid.UUID `json:"user_uid"`
	Username      *string   `json:"username"`
	Name          string    `json:"name"`
	ProfileImage  uuid.UUID `json:"profile_image"`
	FollowerCount int64     `json:"follower_count"`
	FolloweeCount int64     `json:"followee_count"`
	PostCount     int64     `json:"post_count"`
	IsFollowing   bool      `json:"is_following"`
}

func (q *Queries) GetProfileByUsernameOrID(ctx context.Context, arg GetProfileByUsernameOrIDParams) (*GetProfileByUsernameOrIDRow, error) {
	row := q.db.QueryRow(ctx, getProfileByUsernameOrID, arg.MyUserID, arg.TargetUserID, arg.TargetUsername)
	var i GetProfileByUsernameOrIDRow
	err := row.Scan(
		&i.UserUid,
		&i.Username,
		&i.Name,
		&i.ProfileImage,
		&i.FollowerCount,
		&i.FolloweeCount,
		&i.PostCount,
		&i.IsFollowing,
	)
	return &i, err
}

const uploadProfileImage = `-- name: UploadProfileImage :one
UPDATE
    profiles
SET
    profile_image = $1
WHERE
    user_id = $2
RETURNING
    profile_image
`

type UploadProfileImageParams struct {
	ImageUid uuid.UUID `json:"image_uid"`
	MyUserID int32     `json:"my_user_id"`
}

func (q *Queries) UploadProfileImage(ctx context.Context, arg UploadProfileImageParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, uploadProfileImage, arg.ImageUid, arg.MyUserID)
	var profile_image uuid.UUID
	err := row.Scan(&profile_image)
	return profile_image, err
}
