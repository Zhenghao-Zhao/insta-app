// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const checkUserExistsByEmail = `-- name: CheckUserExistsByEmail :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            users
        WHERE
            email = $1) AS exists
`

func (q *Queries) CheckUserExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExistsByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, PASSWORD)
    VALUES ($1, $2, $3)
RETURNING
    id, created_at, uid, email, password, username
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Uid,
		&i.Email,
		&i.Password,
		&i.Username,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAuthProfile = `-- name: GetAuthProfile :one
SELECT
    u.username,
    p.name,
    u.uid,
    p.profile_image AS profile_image
FROM
    users u
    LEFT JOIN profiles p ON u.id = p.user_id
WHERE
    u.id = $1
`

type GetAuthProfileRow struct {
	Username     string    `json:"username"`
	Name         *string   `json:"name"`
	Uid          uuid.UUID `json:"uid"`
	ProfileImage uuid.UUID `json:"profile_image"`
}

func (q *Queries) GetAuthProfile(ctx context.Context, myUserID int32) (*GetAuthProfileRow, error) {
	row := q.db.QueryRow(ctx, getAuthProfile, myUserID)
	var i GetAuthProfileRow
	err := row.Scan(
		&i.Username,
		&i.Name,
		&i.Uid,
		&i.ProfileImage,
	)
	return &i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    u.username,
    u.id,
    p.name,
    u.uid,
    p.profile_image,
    u.email,
    u.password
FROM
    users u
    LEFT JOIN profiles p ON u.id = p.user_id
WHERE
    email = $1
`

type GetUserByEmailRow struct {
	Username     string    `json:"username"`
	ID           int32     `json:"id"`
	Name         *string   `json:"name"`
	Uid          uuid.UUID `json:"uid"`
	ProfileImage uuid.UUID `json:"profile_image"`
	Email        string    `json:"email"`
	Password     string    `json:"password"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.Username,
		&i.ID,
		&i.Name,
		&i.Uid,
		&i.ProfileImage,
		&i.Email,
		&i.Password,
	)
	return &i, err
}

const searchPaginatedUsers = `-- name: SearchPaginatedUsers :many
SELECT
    user_uid,
    username,
    name,
    profile_image
FROM
    user_profile_search
WHERE
    search_param @@ to_tsquery($1 || ':*') OFFSET $2
LIMIT $3
`

type SearchPaginatedUsersParams struct {
	SearchQuery *string `json:"search_query"`
	Offset      int32   `json:"offset"`
	Limit       int32   `json:"limit"`
}

type SearchPaginatedUsersRow struct {
	UserUid      uuid.UUID `json:"user_uid"`
	Username     string    `json:"username"`
	Name         *string   `json:"name"`
	ProfileImage uuid.UUID `json:"profile_image"`
}

func (q *Queries) SearchPaginatedUsers(ctx context.Context, arg SearchPaginatedUsersParams) ([]*SearchPaginatedUsersRow, error) {
	rows, err := q.db.Query(ctx, searchPaginatedUsers, arg.SearchQuery, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*SearchPaginatedUsersRow
	for rows.Next() {
		var i SearchPaginatedUsersRow
		if err := rows.Scan(
			&i.UserUid,
			&i.Username,
			&i.Name,
			&i.ProfileImage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
